// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Offre {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  status    Status @default(ACTIVE)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}
model User {
  id            String    @id @default(cuid())
  name          String?
  role          Role      @default(ENIMISTE)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  profile       Profile?
  posts         Offre[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  @@map(name: "users")
}

enum Role {
  ENIMISTE
  COMPANY
  ADMIN
}

enum Status {
  ACTIVE
  ARCHIVED
}
model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId String    @unique
}
