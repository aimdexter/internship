// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Offer {
  id            String     @default(cuid()) @id
  title         String
  description   String
  status        Status @default(ACTIVE)
  author        User?   @relation(fields: [authorId], references: [id])
  authorId      String?
  startDate     DateTime
  endDate       DateTime
  companyId     String
  applications  Application[]
  company       Company  @relation(fields: [companyId], references: [id])
  coordinatorId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Application {
  id            String    @id @default(cuid())
  studentId     String
  student       User     @relation(fields: [studentId], references: [id])
  offerId       String
  offer         Offer    @relation(fields: [offerId], references: [id])
  status        String
  interviewDate DateTime?
  agreementUrl  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Company {
  id          String    @id @default(cuid())
  name        String
  description String?
  website     String?
  offers      Offer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model User {
  id            String    @id @default(cuid())
  name          String?
  role          Role      @default(ENIMISTE)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  application   Application[]
  profile       Profile?
  offers        Offer[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  @@map(name: "users")
}

enum Role {
  ENIMISTE
  COMPANY
  COORDINATOR
  ADMIN
}

enum Status {
  ACTIVE
  DRAFT
  ARCHIVED
}
model Profile {
  profileId     String    @id @default(cuid())
  user   User   @relation(fields: [profileId], references: [id])
  nom           String
  prenom        String
  titre         String?
  adresse       String?
  email         String
  telephone     String?
  siteWeb       String?
  resume        String?
  education     Education[]
  experience    Experience[]
  competences   Competence[]
}

model Education {
  id            String    @id @default(cuid())
  etablissement String
  diplome       String
  domaine       String?
  dateDebut     String?
  dateFin       String?
  profileId     String?
  profile       Profile?  @relation(fields: [profileId], references: [profileId])
}

model Experience {
  id            String    @id @default(cuid())
  entreprise    String
  poste         String
  lieu          String?
  dateDebut     String?
  dateFin       String?
  description   String?
  profileId     String?
  profile       Profile?  @relation(fields: [profileId], references: [profileId])
}

model Competence {
  id            String    @id @default(cuid())
  nom           String
  niveau        String?
  profileId     String?
  profile       Profile?  @relation(fields: [profileId], references: [profileId])
}

